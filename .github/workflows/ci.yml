name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: radio_review_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick, mysql, pdo_mysql, redis
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Copy environment file
      run: cp .env.example .env

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader

    - name: Install npm dependencies
      run: npm ci

    - name: Generate application key
      run: php artisan key:generate

    - name: Set up test environment
      run: |
        php artisan config:clear
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: radio_review_test
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Build assets
      run: npm run build

    - name: Run database migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: radio_review_test
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: Run PHPUnit tests
      run: vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-text
      env:
        APP_ENV: testing
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: radio_review_test
        DB_USERNAME: root
        DB_PASSWORD: root
        CACHE_DRIVER: array
        SESSION_DRIVER: array
        QUEUE_CONNECTION: sync
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379

    - name: Upload coverage reports to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction --no-progress

    - name: Run PHP CS Fixer (if available)
      run: |
        if [ -f vendor/bin/php-cs-fixer ]; then
          vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
        else
          echo "PHP CS Fixer not installed, skipping..."
        fi
      continue-on-error: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Run ESLint (if available)
      run: |
        if [ -f node_modules/.bin/eslint ]; then
          npm run lint
        else
          echo "ESLint not configured, skipping..."
        fi
      continue-on-error: true

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction --no-progress

    - name: Run security audit
      run: composer audit
      continue-on-error: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true